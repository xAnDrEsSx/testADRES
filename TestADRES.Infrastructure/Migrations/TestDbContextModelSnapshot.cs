// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using TestADRES.Infrastructure.Persistence;

#nullable disable

namespace TestADRES.Infrastructure.Migrations
{
    [DbContext(typeof(TestDbContext))]
    partial class TestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestADRES.Domain.Entities.BusinessUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("Unique identifier for the business unit");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasComment("Indicates if the business unit is active");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasComment("Name of the business unit");

                    b.HasKey("Id");

                    b.ToTable("business_units");
                });

            modelBuilder.Entity("TestADRES.Domain.Entities.HistoricalRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("Unique ID");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("change_date");

                    b.Property<Guid>("ChangedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("changed_by");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("field_name");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("old_value");

                    b.Property<Guid>("RequirementId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("requirement_id");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("RequirementId");

                    b.ToTable("historical_requirements");
                });

            modelBuilder.Entity("TestADRES.Domain.Entities.Requirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("Unique identifier for the requirement");

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("acquisition_date")
                        .HasComment("The date when the requirement is acquired");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("budget")
                        .HasComment("The budget allocated for the requirement");

                    b.Property<int>("BusinessUnitId")
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id")
                        .HasComment("The ID of the business unit associated with the requirement");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by_user_id")
                        .HasComment("The ID of the user who created this requirement");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Documentation")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("documentation")
                        .HasComment("The documentation associated with the requirement (e.g., purchase order, invoice)");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item_type")
                        .HasComment("The ID of the item type associated with the requirement");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified_date");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("quantity")
                        .HasComment("The quantity of the items required");

                    b.Property<int>("RequirementStatusId")
                        .HasColumnType("int")
                        .HasColumnName("requirement_status_id")
                        .HasComment("The status ID of the requirement (e.g., pending, approved, rejected)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("supplier_id")
                        .HasComment("The ID of the supplier for this requirement");

                    b.Property<decimal>("UnitValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unit_value")
                        .HasComment("The unit value (cost per unit) of the item");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("RequirementStatusId");

                    b.HasIndex("SupplierId");

                    b.ToTable("requirements");
                });

            modelBuilder.Entity("TestADRES.Domain.Entities.RequirementStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("Unique ID for the requirement status");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .HasComment("The name of the requirement status, e.g., 'Pending', 'Approved'");

                    b.HasKey("Id");

                    b.ToTable("requirement_statuses");
                });

            modelBuilder.Entity("TestADRES.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasComment("Unique ID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("document_number")
                        .HasComment("Document number of the supplier, e.g., tax ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email")
                        .HasComment("Email address of the supplier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasComment("Indicates whether the supplier is active");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("legal_name")
                        .HasComment("Legal name of the supplier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("phone")
                        .HasComment("Phone number of the supplier");

                    b.HasKey("Id");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("TestADRES.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TestADRES.Domain.Entities.HistoricalRequirement", b =>
                {
                    b.HasOne("TestADRES.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestADRES.Domain.Entities.Requirement", "Requirement")
                        .WithMany()
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requirement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestADRES.Domain.Entities.Requirement", b =>
                {
                    b.HasOne("TestADRES.Domain.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany("Requirements")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestADRES.Domain.Entities.User", "User")
                        .WithMany("Requirements")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestADRES.Domain.Entities.RequirementStatus", "RequirementStatus")
                        .WithMany("Requirements")
                        .HasForeignKey("RequirementStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TestADRES.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Requirements")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessUnit");

                    b.Navigation("RequirementStatus");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestADRES.Domain.Entities.BusinessUnit", b =>
                {
                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("TestADRES.Domain.Entities.RequirementStatus", b =>
                {
                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("TestADRES.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("TestADRES.Domain.Entities.User", b =>
                {
                    b.Navigation("Requirements");
                });
#pragma warning restore 612, 618
        }
    }
}
